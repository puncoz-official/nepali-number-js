name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
          - prerelease

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore: bump version')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Analyze commits for version bump
        id: analyze
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, creating initial release"
            echo "version_bump=minor" >> $GITHUB_OUTPUT
            echo "is_initial=true" >> $GITHUB_OUTPUT
          else
            echo "Last tag: $LAST_TAG"
            COMMITS=$(git log $LAST_TAG..HEAD --oneline)
            echo "Commits since last tag:"
            echo "$COMMITS"
            
            # Analyze commit messages for conventional commits
            if echo "$COMMITS" | grep -qE "^[a-f0-9]+ (feat|feature)(\(.+\))?!:"; then
              echo "version_bump=major" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -qE "^[a-f0-9]+ (feat|feature)(\(.+\))?:"; then
              echo "version_bump=minor" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -qE "^[a-f0-9]+ (fix|bugfix)(\(.+\))?:"; then
              echo "version_bump=patch" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -qE "^[a-f0-9]+ (perf|performance)(\(.+\))?:"; then
              echo "version_bump=patch" >> $GITHUB_OUTPUT
            else
              echo "version_bump=patch" >> $GITHUB_OUTPUT
            fi
            echo "is_initial=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine version bump
        id: version_bump
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.release_type }}" != "auto" ]; then
            echo "bump_type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          else
            echo "bump_type=${{ steps.analyze.outputs.version_bump }}" >> $GITHUB_OUTPUT
          fi

      - name: Run tests
        run: |
          bun run type-check
          bun run test
          bun run build

      - name: Generate changelog
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" | head -20)
          else
            COMMITS=$(git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s (%h)")
          fi
          
          # Create changelog
          CHANGELOG="## What's Changed\n\n"
          
          # Features
          FEATURES=$(echo "$COMMITS" | grep -E "(feat|feature):" || true)
          if [ ! -z "$FEATURES" ]; then
            CHANGELOG="$CHANGELOG### üöÄ Features\n$FEATURES\n\n"
          fi
          
          # Bug fixes
          FIXES=$(echo "$COMMITS" | grep -E "(fix|bugfix):" || true)
          if [ ! -z "$FIXES" ]; then
            CHANGELOG="$CHANGELOG### üêõ Bug Fixes\n$FIXES\n\n"
          fi
          
          # Performance improvements
          PERF=$(echo "$COMMITS" | grep -E "(perf|performance):" || true)
          if [ ! -z "$PERF" ]; then
            CHANGELOG="$CHANGELOG### ‚ö° Performance\n$PERF\n\n"
          fi
          
          # Documentation
          DOCS=$(echo "$COMMITS" | grep -E "(docs|doc):" || true)
          if [ ! -z "$DOCS" ]; then
            CHANGELOG="$CHANGELOG### üìö Documentation\n$DOCS\n\n"
          fi
          
          # Other changes
          OTHER=$(echo "$COMMITS" | grep -vE "(feat|feature|fix|bugfix|perf|performance|docs|doc):" || true)
          if [ ! -z "$OTHER" ]; then
            CHANGELOG="$CHANGELOG### üîß Other Changes\n$OTHER\n\n"
          fi
          
          # Save changelog to file for multiline output
          echo -e "$CHANGELOG" > changelog.md
          echo "changelog_file=changelog.md" >> $GITHUB_OUTPUT

      - name: Bump version and create tag
        id: version
        run: |
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"
          
          if [ "$BUMP_TYPE" = "prerelease" ]; then
            npm version prerelease --preid=beta --no-git-tag-version
          else
            npm version $BUMP_TYPE --no-git-tag-version
          fi
          
          NEW_VERSION=$(node -p "require('./package.json').version")
          NEW_TAG="v$NEW_VERSION"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          
          # Commit and tag
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION"
          git tag "$NEW_TAG"
          git push origin main
          git push origin "$NEW_TAG"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          release_name: Release ${{ steps.version.outputs.new_version }}
          body_path: changelog.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.new_version, 'beta') || contains(steps.version.outputs.new_version, 'alpha') || contains(steps.version.outputs.new_version, 'rc') }}

      - name: Trigger publish workflow
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'publish.yml',
              ref: '${{ steps.version.outputs.new_tag }}'
            });

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release]
    if: always() && needs.release.result == 'success'

    steps:
      - name: Notify Success
        run: |
          echo "üéâ Release ${{ needs.release.outputs.new_version }} created successfully!"
          echo "üè∑Ô∏è Tag: ${{ needs.release.outputs.new_tag }}"
          echo "üì¶ NPM publish workflow has been triggered"
